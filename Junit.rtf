{\rtf1\ansi\ansicpg1251\deff0\deflang1049{\fonttbl{\f0\fnil\fcharset204{\*\fname Courier New;}Courier New CYR;}{\f1\fnil\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue0;\red0\green0\blue255;\red0\green153\blue0;\red127\green0\blue85;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\nowidctlpar\hyphpar0\sl240\slmult1\cf1\kerning1\f0\fs22\'c0\'ed\'e0\'eb\'e8\'e7 \'ea\'ee\'e4\'e0:\tab\'d1\'f2\'e0\'f2\'e8\'f7\'e5\'f1\'ea\'e8\'e9\tab\tab\u8594?\tab Sonar\par
\tab\tab\tab\'c4\'e8\'ed\'e0\'ec\'e8\'f7\'e5\'f1\'ea\'e8\'e9\tab\u8594?\tab\'c7\'e0\'ef\'f3\'f1\'ea\'e0\'e5\'ec \'cf\'ce \'ed\'e0 vCPU, dev-\'f1\'f2\'e5\'ed\'e4\'e0\'f5. \par
\par
\'c8\'e7\'ec\'e5\'f0\'ff\'e5\'ec \'ed\'e0\'e3\'f0\'f3\'e7\'ea\'f3, \'f3\'f2\'e5\'f7\'ea\'f3 \'ef\'e0\'ec\'ff\'f2\'e8, \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \lang1033\f1 l\lang1049\f0 ibs.\par
\par
\pard\nowidctlpar\hyphpar0\fi-888\li888\sl240\slmult1\b Stub\b0  - \'f5\'ee\'f2\'e8\'ec \'ef\'f0\'ee\'f2\'e5\'f1\'f2\'e8\'f2\'fc \'ed\'ee\'e2\'fb\'e9 \'f4\'f3\'ed\'ea\'f6\'e8\'ee\'ed\'e0\'eb \'ea \'e1\'ee\'e5\'e2\'ee\'e9 \'c1\'c4. \'cf\'ee\'e4\'ed\'e8\'ec\'e0\'e5\'ec \'ed\'e0 \'f1\'e2\'ee\'b8\'ec \'ea\'ee\'ec\'ef\'e5 Postgres, \'e7\'e0\'eb\'e8\'e2\'e0\'e5\'ec \'e2 \'ed\'e5\'b8 \'e4\'e0\'ed\'ed\'fb\'e5 \'e8 \'f2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'ed\'e0 \'fd\'f2\'ee\'ec Stub \'ed\'ee\'e2\'fb\'e9 \'f4\'f3\'ed\'ea\'f6\'e8\'ee\'ed\'e0\'eb.\par
\par
\b Mock \b0 - \'f3 class MyClass \'e5\'f1\'f2\'fc \'f1\'eb\'ee\'e6\'ed\'fb\'e9 \'ec\'e5\'f2\'ee\'e4 String stringGenerator(int stringLength). \'cc\'fb \'e4\'e5\'eb\'e0\'e5\'ec Mockito.\i when\i0 (myClass.stringGenerator(5)).thenReturn("Hello")\b\par
\pard\nowidctlpar\hyphpar0\sl240\slmult1\b0\par
\'c2\'e8\'e4\'fb \'f2\'e5\'f1\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff:\par
\pard\nowidctlpar\hyphpar0\fi-1420\li1953\sl240\slmult1\ul\'cc\'ee\'e4\'f3\'eb\'fc\'ed\'ee\'e5\ulnone\tab\'d2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'ee\'f2\'e4\'e5\'eb\'fc\'ed\'fb\'e5 \'ec\'ee\'e4\'f3\'ec\'e8. \'cd\'e5 \'f4\'e0\'ea\'f2, \'f7\'f2\'ee \'e5\'f1\'eb\'e8 \'ec\'ee\'e4\'f3\'eb\'e8 \'f0\'e0\'e1\'ee\'f2\'e0\'fe\'f2 \'ef\'f0\'e0\'e2\'e8\'eb\'fc\'ed\'ee, \'f2\'ee \'e8 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e0 \'e7\'e0\'f0\'e0\'e1\'ee\'f2\'e0\'e5\'f2, \'ef\'ee\'fd\'f2\'ee\'ec\'f3 \u8594?\par
\ul\'c8\'ed\'f2\'e5\'e3\'f0\'e0\'f6\'e8\'ee\'ed\'ed\'ee\'e5\ulnone\tab\'d2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'e2\'e7\'e0\'e8\'ec\'ee\'e4\'e5\'e9\'f1\'f2\'e2\'e8\'e5 \'ec\'e5\'e6\'e4\'f3 \'ec\'ee\'e4\'f3\'eb\'ff\'ec\'e8. \'cf\'f0\'ee\'e2\'e5\'f0\'ff\'e5\'ec \'f0\'e0\'e1\'ee\'f2\'f3 \'f1 \'e2\'ed\'e5\'f8\'ed\'e8\'ec\'e8 \'f1\'e8\'f1\'f2\'e5\'ec\'e0\'ec\'e8 \'e0\'eb\'ff \'c1\'c4 \'e8 \'f2.\'ef.\par
\tab\'d0\'e0\'e7\'e4\'e5\'eb\'ff\'e5\'f2\'f1\'ff \'ed\'e0 \'e4\'e2\'e0:\par
\tab\'d2\'e5\'f1\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'f1\'ee\'e5\'e4\'e8\'ed\'e5\'ed\'e8\'ff \'f1 \'c1\'c4 - \'e5\'f1\'f2\'fc \'eb\'e8 \'f1\'e2\'ff\'e7\'fc \'f1 \'c1\'c4 \'ef\'ee IP, \'eb\'ee\'e3\'e8\'ed\'fb/\'ef\'e0\'f0\'ee\'eb\'e8, \'ed\'e0\'eb\'e8\'f7\'e8\'e5 \'e4\'f0\'e0\'e9\'e2\'e5\'f0\'ee\'e2 \'e8 \'f2.\'ef.\par
\tab\'d2\'e5\'f1\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'ea\'e0\'ed\'e0\'eb\'e0 - \'e5\'f1\'eb\'e8 \'ee\'f2\'ef\'f0\'e0\'e2\'e8\'eb\'e8 \'e7\'e0\'ef\'f0\'ee\'f1 REST list, \'f2\'ee \'ef\'ee\'eb\'f3\'f7\'e8\'eb\'e8 \'f2\'ee \'f7\'f2\'ee \'ed\'e0\'e4\'ee.\par
\ul\'d1\'e8\'f1\'f2\'e5\'ec\'ed\'ee\'e5\ulnone\tab\'d2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'e2\'f1\'fe \'f1\'e8\'f1\'f2\'e5\'ec\'f3 \'f6\'e5\'eb\'e8\'ea\'ee\'ec. \'c7\'e0\'ed\'e8\'ec\'e0\'fe\'f2\'f1\'ff \'ee\'f2\'e4\'e5\'eb\'fc\'ed\'fb\'e5 \'eb\'fe\'e4\'e8 (\'ef\'e8\'f8\'f3\'f2 \'c0\'e2\'f2\'ee\'f2\'e5\'f1\'f2\'fb), \'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'ed\'e5 \'e7\'ed\'e0\'fe\'f2 \'ea\'e0\'ea \'f3\'f1\'f2\'f0\'ee\'e5\'ed \'ea\'ee\'e4, \'ed\'ee \'e7\'ed\'e0\'fe\'f2, \'f7\'f2\'ee \'e5\'f1\'eb\'e8 \'ec\'fb \'ee\'f2\'ef\'f0\'e0\'e2\'e8\'ec \'f2\'e0\'ea\'ee\'e9 \'e7\'e0\'ef\'f0\'ee\'f1, \'f2\'ee \'e4\'ee\'eb\'e6\'ed\'fb \'ef\'ee\'eb\'f3\'f7\'e8\'f2\'fc \'fd\'f2\'ee.\par
\ul\'cf\'f0\'e8\'b8\'ec\'ee\'f7\'ed\'ee\'e5\ulnone\tab = \'cf\'cc\'c8 \'cf\'ee\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'ec/\'f2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'f1\'e8\'f1\'f2\'e5\'ec\'f3 \'ef\'e5\'f0\'e5\'e4 \'e7\'e0\'ea\'e0\'e7\'f7\'e8\'ea\'ee\'ec.\par
\pard\nowidctlpar\hyphpar0\sl240\slmult1\par
+-------+\tab\tab +--------+\tab\tab +--------+\par
|\'c2\'fb\'ef\'e5\'f7\'ea\'e0|\tab\u8594?\tab |\'d3\'ef\'e0\'ea\'ee\'e2\'ea\'e0|\tab\u8594?\tab |\'c4\'ee\'f1\'f2\'e0\'e2\'ea\'e0|\par
+-------+\tab\tab +--------+\tab\tab +--------+\par
\par
\'e0) \'d2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'ef\'ee \'ee\'f2\'e4\'e5\'eb\'fc\'ed\'ee\'f1\'f2\'e8 \'ea\'e0\'e6\'e4\'fb\'e9 \'ec\'ee\'e4\'f3\'eb\'fc\par
\'e1) \'d2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'f1\'ee\'e5\'e4\'e8\'ed\'e5\'ed\'e8\'e5 \'ec\'e5\'e6\'e4\'f3 \'ec\'ee\'e4\'f3\'eb\'ff\'ec\'e8: \'c2\'fb\'ef\'e5\'f7\'ea\'e0 \u8594? \'d3\'ef\'e0\'ea\'ee\'e2\'ea\'e0, \'d3\'ef\'e0\'ea\'ee\'e2\'ea\'e0 \u8594? \'c4\'ee\'f1\'f2\'e0\'e2\'ea\'e0.\par
\'e2) \'d2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'ea\'e0\'ed\'e0\'eb \'ec\'e5\'e6\'e4\'f3 \'ec\'ee\'e4\'f3\'eb\'ff\'ec\'e8.\par
\par
\'ce\'e1\'ee\'eb\'ee\'f7\'ea\'e0 \'ec\'ee\'e4\'f3\'eb\'fc\'ed\'ee\'e3\'ee \'f2\'e5\'f1\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff. \'d2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'ea\'e0\'ea \'ef\'f0\'e0\'e2\'e8\'eb\'ee \'cc\'c5\'d2\'ce\'c4\'db. \'c2\'f1\'e5 \'ec\'e5\'f2\'ee\'e4\'fb \'c1\'c5\'c7 \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'ee\'e2/\'ef\'e0\'f0\'e0\'ec\'e5\'f2\'f0\'ee\'e2.\par
JUnit 4 \'ef\'ee\'eb\'ed\'ee\'f1\'f2\'fc\'fe \'ef\'ee\'f1\'f2\'f0\'ee\'e5\'ed \'ed\'e0 \'e0\'ed\'ed\'ee\'f2\'e0\'f6\'e8\'ff\'f5, \'e2 \'ee\'f2\'eb\'e8\'f7\'e8\'e8 \'ee\'f2 JUnit 3.\par
\'cf\'ee\'e4\'ea\'eb\'e0\'e4\'fb\'e2\'e0\'ec \'e2 IDE \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea\'f3 junit.jar, \'f1\'ea\'e0\'f7\'e5\'ed\'ed\'f3\'fe \'f1 \cf0{\field{\*\fldinst{HYPERLINK "http://junit.org"}}{\fldrslt{\ul\cf2 http://junit.org}}}\cf1\f0\fs22\par
\tab - \'f2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'ed\'e5\'f2\'f0\'e8\'e2\'e8\'e0\'eb\'fc\'ed\'fb\'e5 \'ec\'e5\'f2\'ee\'e4\'fb, \'e0 \'ed\'e5 \'e4\'eb\'ff get() set()\par
\tab - \'e2 \'ef\'e5\'f0\'e2\'f3\'fe \'ee\'f7\'e5\'f0\'e5\'e4\'fc \'e4\'e5\'eb\'e0\'e5\'ec \'f2\'e5\'f1\'f2\'fb \'f1 \'cf\'ce\'cb\'ce\'c6\'c8\'d2\'c5\'cb\'dc\'cd\'db\'cc \'f1\'f6\'e5\'ed\'e0\'f0\'e8\'e5\'ec - \'ef\'f0\'ee\'e2\'e5\'f0\'ff\'e5\'ec \'f0\'e0\'e1\'ee\'f2\'e0\'f2\'e5\'f2/\'ed\'e5 \'f0\'e0\'e1\'ee\'f2\'e0\'e5\'f2 \'f2\'ee\'f2 \'e8\'eb\'e8 \'e8\'ed\'ee\'e9 \'ec\'e5\'f2\'ee\'e4\par
\tab - \'ef\'ee\'f2\'ee\'ec \'f3\'e4\'e5\'eb\'ff\'e5\'ec \'e2\'ed\'e8\'ec\'e0\'ed\'e8\'e5 "\'e0\'eb\'fc\'f2\'e5\'f0\'ed\'e0\'f2\'e8\'e2\'ed\'fb\'ec" \'f1\'f6\'e5\'ed\'e0\'f0\'e8\'ff\'ec \'ef\'ee\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'ec\'e5\'f2\'ee\'e4\'e0 - \'ef\'e5\'f0\'e5\'e4\'e0\'b8\'ec null \'e8\'eb\'e8 -1 \'e8\'eb\'e8 \'e1\'f3\'ea\'e2\'f3 \'e2\'ec\'e5\'f1\'f2\'ee \'f7\'e8\'f1\'eb\'e0\par
\tab - \'f1\'ee\'e7\'e4\'e0\'e2\'e0\'f2\'fc \'e1\'ee\'eb\'e5\'e5 \'f1\'f4\'ee\'ea\'f3\'f1\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'fb\'e5 \'ed\'e0 \'f1\'e2\'ee\'e8\'f5 \'ee\'e1\'ff\'e7\'e0\'ed\'ed\'ee\'f1\'f2\'ff\'f5 \'ea\'eb\'e0\'f1\'f1\'fb \u8594? \'ef\'f0\'ee\'f9\'e5 \'f2\'e5\'f1\'f2\'e8\'f0\'ee\'e2\'e0\'f2\'fc\par
\tab - \'f1\'e8\'eb\'fc\'ed\'ee \'ef\'ee\'ec\'ee\'e3\'e0\'e5\'f2 \'ef\'f0\'e8 \'e4\'ee\'e1\'e0\'e2\'eb\'e5\'ed\'e8\'e8 \'ed\'ee\'e2\'ee\'e9 \'f4\'f3\'ed\'ea\'f6\'e8\'ee\'ed\'e0\'eb\'fc\'ed\'ee\'f1\'f2\'e8\par
\tab - \'f2\'e5\'f1\'f2\'fb \'ee\'f2\'f0\'e0\'e6\'e0\'fe\'f2 \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'fb \'d2\'c7 \u8594? \'ea\'e0\'e6\'e4\'ee\'ec\'f3 \'f2\'e5\'f5\'ed\'e8\'f7\'e5\'f1\'ea\'ee\'ec\'f3 \'f2\'f0\'e5\'e1\'ee\'e2\'e0\'ed\'e8\'fe \'f1\'ee\'ee\'f2\'e2\'e5\'f2\'f1\'f2\'e2\'f3\'e5\'f2 \'f2\'e5\'f1\'f2\par
\par
\cf3 @Test\cf1\tab\par
\'cf\'ee\'ec\'e5\'f7\'e0\'e5\'f2 \'cc\'c5\'d2\'ce\'c4 (\'ed\'e5 \'ea\'eb\'e0\'f1\'f1) \'ea\'e0\'ea \'f2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec\'fb\'e9, \'f7\'f2\'ee \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'e5\'f2 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \cf4\b class\cf1\b0  org.junit.Assert \'e8 \'e7\'e0\'ef\'f3\'f1\'ea\'e0\'f2\'fc \'e5\'e3\'ee \'e2 \'f0\'e5\'e6\'e8\'ec\'e5 \'f2\'e5\'f1\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff.\par
\'d2\'e5\'f1\'f2\'ee\'e2\'fb\'e9 \'ec\'e5\'f2\'ee\'e4 \'e2\'f1\'e5\'e3\'e4\'e0 \cf4\b public void\cf1\b0 .\par
\par
\cf3 @Test(\cf1 expected =\cf3  NotSuchMarkException.class)\cf1  \'ef\'f0\'e8 \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'e8 \'ec\'e5\'f2\'ee\'e4\'e0 \'ee\'e6\'e8\'e4\'e0\'e5\'ec \'ef\'ee\'eb\'f3\'f7\'e8\'f2\'fc \'e8\'f1\'ea\'eb\'fe\'f7\'e5\'ed\'e8\'e5\par
\cf3 @Test(\cf1 timeout = 10\cf3 )\tab\cf1\'e5\'f1\'eb\'e8 \'f2\'e5\'f1\'f2 \'e2\'fb\'ef\'ee\'eb\'ed\'ff\'e5\'f2\'f1\'ff > 10 \'ec\'e8\'eb\'eb\'e8\'f1\'e5\'ea - \'f2\'e5\'f1\'f2 fail\par
\par
\'c5\'f1\'f2\'fc \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e0:\par
\par
\cf4\b package\cf1\b0  org.my.calculation\par
\cf4\b public class\cf1\b0  Calculator\{\par
\tab\cf4\b public int\cf1\b0  calc (\cf4\b int\cf1\b0  x, \cf4\b int\cf1\b0  y) \{\par
\tab\tab\cf4\b return\cf1\b0  x * y;\par
\par
\'d2\'e5\'f1\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5:\par
\par
\cf4\b package\cf1\b0  org.my.calculation\par
\cf4\b import\cf1\b0  org.junit.Assert\par
\cf4\b import\cf1\b0  org.junit.Test\par
\cf4\b import\cf1\b0  org.my.calculation.Calculator\par
\cf4\b public class\cf1\b0  CalculatorTest\par
\tab\cf3 @Test\tab\tab\tab\tab\tab\tab\tab\tab\cf1\'f2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec \'ec\'e5\'f2\'ee\'e4 calc() \b\'c1\'c5\'c7 \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'ee\'e2\b0\par
\cf3\tab\cf4\b public void\cf1\b0  calc()\{\par
\tab\tab Calculator c = \cf4\b new\cf1\b0  Calculator()\par
\tab\tab\cf4\b int \cf1\b0 x = 11\par
\cf4\b\tab\tab int \cf1\b0 y = 10\par
\tab\tab\cf4\b int \cf1\b0 expected = 110\tab\tab\tab\tab\'ef\'f0\'e8 \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'e8 \'ec\'e5\'f2\'ee\'e4\'e0 Calculator.calc \'ee\'e6\'e8\'e4\'e0\'e5\'ec \'ef\'ee\'eb\'f3\'f7\'e8\'f2\'fc \'fd\'f2\'ee\par
\cf4\b\tab\tab int \cf1\b0 actual = c.calc(x, y)\tab\tab\tab\'e0 \'f0\'e5\'e0\'eb\'fc\'ed\'ee \'ef\'ee\'eb\'f3\'f7\'e0\'e5\'ec \'fd\'f2\'ee\par
\tab\tab Assert.assertEquals(expected, actual, 0.01);\tab\'f1\'ee\'e2\'ef\'e0\'e4\'e0\'e5\'f2 \'eb\'e8 \'ee\'e6\'e8\'e4\'e0\'e5\'ec\'fb\'e9 \'f0\'e5\'e7\'f3\'eb\'fc\'f2\'e0\'f2 \'f1 \'ef\'ee\'eb\'f3\'f7\'e5\'ed\'ed\'fb\'ec \'ed\'e0 \'ef\'ee\'e3\'f0\'e5\'f8\'ed\'ee\'f1\'f2\'fc 0.01\par
\tab\tab // \'e8\'eb\'e8 Assert.assertEquals( "\'d2\'e5\'f1\'f2 \'ed\'e5 \'ef\'f0\'ee\'f8\'b8\'eb \'f2.\'ea. ", expected, actual, 0.01);\par
\par
\'c5\'f1\'eb\'e8 \'f2\'e5\'f1\'f2 \'ef\'f0\'ee\'f5\'ee\'e4\'e8\'f2 \'ed\'e5\'f3\'e4\'e0\'f7\'ed\'ee, \'f2\'ee \'e1\'f3\'e4\'e5\'f2 \'ee\'f8\'e8\'e1\'ea\'e0 java.lang.AssertionError\par
\par
\'c5\'f1\'eb\'e8 \'f5\'ee\'f2\'e8\'ec \'ee\'e4\'e8\'ed \'e8 \'f2\'ee\'f2 \'e6\'e5 \'f2\'e5\'f1\'f2-\'ec\'e5\'f2\'ee\'e4 \'ef\'f0\'ee\'e3\'ed\'e0\'f2\'fc \'ed\'e5\'f1\'ea\'ee\'eb\'fc\'ea\'ee \'f0\'e0\'e7 \'f1 \'f0\'e0\'e7\'eb\'e8\'f7\'ed\'fb\'ec\'e8 \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'e0\'ec\'e8, \'f2\'ee\par
\cf3 @ParameterizedTest\par
@ValueSource\cf1 (strings = \{"Hello", "World"\})\par
\cf3\tab\cf4\b public void\cf1\b0  StringParameterTest(String arg)\tab\'ee\'e1\'fb\'f7\'ed\'fb\'e5 \'f2\'e5\'f1\'f2-\'ec\'e5\'f2\'ee\'e4\'fb \'e2\'f1\'e5\'e3\'e4\'e0 \'e1\'e5\'e7 \'ef\'e0\'f0\'e0\'ec\'e5\'f2\'f0\'ee\'e2. \'c2 \'ef\'e0\'f0\'e0\'ec\'e5\'f2\'f0\'e8\'e7\'ee\'e2\'e0\'ed\'ed\'fb\'f5 \'f2\'e5\'f1\'f2\'e0\'f5 \'e2 \'ea\'e0\'f7\'e5\'f1\'f2\'e2\'e5 \'ef\'e0\'f0\'e0\'ec\'e5\'f2\'f0\'e0 String arg \'e1\'e5\'f0\'b8\'ec \'e4\'e0\'ed\'ed\'fb\'e5 \'e8\'e7 \cf3 @ValueSource\cf1\par
\par
\'c7\'e0\'ef\'f3\'f1\'ea \'f2\'e5\'f1\'f2\'ee\'e2:\par
\b\tab #javac\b0  -cp junit-4.12.jar CalculatorTest.java\tab\'f1\'ed\'e0\'f7\'e0\'eb\'e0 \'ea\'ee\'ec\'ef\'e8\'eb\'e8\'f0\'f3\'e5\'ec \'ed\'e0\'f8 class \'e4\'eb\'ff \'f2\'e5\'f1\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff\par
\b\tab #java\b0  -cp junit-4.12.jar org.junit.runner.JUnitCore CalculatorTest\tab\'e7\'e0\'ef\'f3\'f1\'ea\'e0\'e5\'ec \'f2\'e5\'f1\'f2.\par
\par
\'c8\'eb\'e8 \'f2\'e0\'ea:\par
\tab\b #mvn test\b0\tab\tab\'f2\'e5\'f1\'f2\'fb \'e4\'ee\'eb\'e6\'ed\'fb \'ed\'e0\'f5\'ee\'e4\'e8\'f2\'f1\'ff \'e2 \'ef\'f0\'e0\'e2\'e8\'eb\'fc\'ed\'ee\'e9 \'ef\'e0\'ef\'ee\'f7\'ea\'e5\par
\tab\b #gradle test\par
\par
\b0 JUnit \'ef\'f0\'ee\'e1\'e5\'e3\'e0\'e5\'f2\'f1\'ff \'ef\'ee src/test/java \'e8\'f9\'e5\'f2 \'e0\'ed\'ed\'ee\'f2\'e0\'f6\'e8\'fe \cf3 @Test\cf1 , \'e8 ...\par
\par
\'cc\'e5\'f2\'ee\'e4\'fb \cf4\b class\cf1\b0  Assert:\par
\cf4\b\tab void\cf1\b0  assertTrue (\cf4\b boolean\cf1\b0  condition)/\cf4\b void\cf1\b0  assertFalse (\cf4\b boolean\cf1\b0  condition)\tab\'ef\'f0\'ee\'e2\'e5\'f0\'ea\'e0 \'ed\'e0 true/false \'f3\'f1\'eb\'ee\'e2\'e8\'ff condition\par
\cf4\b\tab void\cf1\b0  assertSame (Object expected, Object actual)/\cf4\b void\cf1\b0  assertNotSame (Object expected, Object actual)\tab\'f1\'f1\'fb\'eb\'ea\'e8 expected \'e8 actual \'ed\'e0 \'ee\'e4\'e8\'ed \'e8 \'f2\'ee\'f2 \'e6\'e5 \'ee\'e1\'fa\'e5\'ea\'f2?\par
\cf4\b\tab void\cf1\b0  assertNull (Object object)/\cf4\b void\cf1\b0  assertNotNull (Object object)\tab\'f1\'f1\'fb\'eb\'ea\'e0 \'ed\'e0 object \'f0\'e0\'e2\'ed\'e0 \'eb\'e8 null?\par
\cf4\b\tab void\cf1\b0  assertThat (T actual, Matcher <T> matcher)\tab\tab\'ef\'f0\'ee\'e2\'e5\'f0\'ea\'e0 \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'ff \'ea\'e0\'ea\'ee\'e3\'ee-\'f2\'ee \'f3\'f1\'eb\'ee\'e2\'e8\'ff\par
\cf4\b\tab void\cf1\b0  fail()\tab\tab\'e2\'fb\'e7\'fb\'e2\'e0\'e5\'f2 \'ee\'f8\'e8\'e1\'ea\'f3 java.lang.AssertionError, \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'e5\'f2\'f1\'ff \'e4\'eb\'ff "\'e7\'e0\'e3\'eb\'f3\'f8\'ea\'e8" \'f2\'e8\'ef\'e0 \'e4\'ee\'f1\'f2\'e8\'e3\'eb\'e8 \'e4\'e0\'ed\'ed\'f3\'fe \'f7\'e0\'f1\'f2\'fc \'ea\'ee\'e4\'e0\par
\par
\'c2\'f1\'e5 \'fd\'f2\'e8 \'ec\'e5\'f2\'ee\'e4\'fb \'e2 JUnit \'f0\'e5\'e0\'eb\'e8\'e7\'ee\'e2\'e0\'ed\'fb \'f1 \'f0\'e0\'e7\'eb\'e8\'f7\'ed\'fb\'ec \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee\'ec \'ef\'e0\'f0\'e0\'ec\'e5\'f2\'f0\'ee\'e2. \'d2\'e8\'ef\'e0 \'ec\'ee\'e6\'ed\'ee \'f2\'e0\'ea: \cf4\b void\cf1\b0  assertTrue(String \i\'f1\'ee\'ee\'e1\'f9\'e5\'ed\'e8\'e5_\'ef\'f0\'e8_test_fail\i0 , \cf4\b boolean\cf1\b0  condition)\par
\par
\ul org.junit.Assume\ulnone\par
\'cc\'e5\'f2\'ee\'e4\'fb \'fd\'f2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0, \'e2 \'ee\'f2\'eb\'e8\'f7\'e8\'e8 \'ee\'f2 Assert, \'ed\'e5 \'e3\'e5\'ed\'e5\'f0\'e8\'f0\'f3\'fe \'ee\'f8\'e8\'e1\'ee\'ea \'ef\'f0\'e8 test fail.\par
\cf4\b void\cf1\b0  assumeNoException (Throwable t)\tab\'f2\'e5\'f1\'f2\'e8\'f0\'f3\'e5\'ec\'fb\'e9 \'ec\'e5\'f2\'ee\'e4 \'e7\'e0\'e2\'e5\'f0\'f8\'e8\'eb\'f1\'ff \'ed\'e5 \'e2\'fb\'e7\'e2\'e0\'e2 \'e8\'f1\'ea\'eb\'fe\'f7\'e5\'ed\'e8\'e5\par
\cf4\b void\cf1\b0  assumeNotNull (Object ... objects)\tab objects \'ed\'e5 null\par
\cf4\b void\cf1\b0  assumeTrue (\cf4\b boolean\cf1\b0  b)\tab\tab\tab\'e7\'ed\'e0\'f7\'e5\'ed\'e8\'e5 b = true\par
\par
\ul Fixture\ulnone\par
(\'f1\'f2\'f0.756 \'e2 Java \'cc\'e5\'f2\'ee\'e4\'fb \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff)\par
\'c4\'eb\'ff \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'ed\'e8\'ff \'f2\'e5\'f1\'f2\'e0 \'ed\'e5\'ee\'e1\'f5\'ee\'e4\'e8\'ec\'ee, \'f7\'f2\'ee\'e1\'fb \'e1\'fb\'eb \'f3\'e6\'e5 \'f1\'ee\'e7\'e4\'e0\'ed \'ea\'e0\'ea\'ee\'e9-\'ed\'e8\'e1\'f3\'e4\'fc \'ee\'e1\'fa\'e5\'ea\'f2, \'f3\'f1\'f2\'e0\'ed\'ee\'e2\'eb\'e5\'ed\'ee \'f1\'ee\'e5\'e4\'e8\'ed\'e5\'ed\'e8\'e5, \'ed\'e0\'eb\'e8\'f7\'e8\'e5 \'f4\'e0\'e9\'eb\'e0, \'f1\'ee\'f1\'f2\'ee\'ff\'ed\'e8\'e5 \'e1\'e0\'e7\'fb. \'ca\'ee\'e4, \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'ed\'e0\'e4\'ee \'e7\'e0\'ef\'f3\'f1\'ea\'e0\'f2\'fc \'ef\'e5\'f0\'e5\'e4 \'e8\'eb\'e8 \'ef\'ee\'f1\'eb\'e5 \'ea\'e0\'e6\'e4\'ee\'e3\'ee \'f2\'e5\'f1\'f2\'e0 \'ed\'e0\'e7\'fb\'e2\'e0\'e5\'f2\'f1\'ff Fixture:\par
\cf4\b public class\cf1\b0  CalculatorTest \{\par
\tab\cf3 @Befor\tab\tab\tab\tab\cf1\'ef\'e5\'f0\'e5\'e4 \'ea\'e0\'e6\'e4\'fb\'ec Test1, Test2 ... \'e1\'f3\'e4\'e5\'f2 \'e7\'e0\'ef\'f3\'f1\'ea\'e0\'f2\'fc\'f1\'ff \'ec\'e5\'f2\'ee\'e4 initTest()\par
\tab\cf4\b public void\cf1\b0  initTest()\{\par
\tab\tab ICalculator calc = \cf4\b new\cf1\b0  CalculatorImpl;\par
\tab\cf3 @After\tab\tab\tab\tab\cf1\'ef\'ee\'f1\'eb\'e5 \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'ff \'ea\'e0\'e6\'e4\'ee\'e3\'ee \'f2\'e5\'f1\'f2\'e0 \'e1\'f3\'e4\'e5\'f2 \'e2\'fb\'e7\'fb\'e2\'e0\'f2\'fc \'ec\'e5\'f2\'ee\'e4 clearTest()\par
\cf3\tab\cf4\b public void\cf1\b0  clearTest()\{\par
\tab\tab calc = \cf4\b null\cf1\b0 ;\par
\cf3\tab @BeforClass\tab\tab\cf1\'ee\'e4\'e8\'ed \'f0\'e0\'e7 \'e7\'e0\'ef\'f3\'f1\'f2\'e8\'f2 \cf4\b static\cf1\b0  (\'ee\'e1\'ff\'e7\'e0\'f2\'e5\'eb\'fc\'ed\'ee) initsomething(), \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'f1\'ee\'e7\'e4\'e0\'f1\'f2 \'ee\'e1\'fa\'e5\'ea\'f2, \'f1 \'ea\'ee\'f2\'ee\'f0\'ee\'ec \'e1\'f3\'e4\'f3\'f2 \'f0\'e0\'e1\'ee\'f2\'e0\'f2\'fc \'e2\'f1\'e5 \'f2\'e5\'f1\'f2\'fb, \'ed\'e5 \'f3\'e4\'e0\'eb\'ff\'ff \'e8 \'ee\'ef\'ff\'f2\'fc \'f1\'ee\'e7\'e4\'e0\'e2\'e0\'ff \'e5\'e3\'ee \'ef\'e5\'f0\'e5\'e4 \'e7\'e0\'ef\'f3\'f1\'ea\'ee\'ec \'ea\'e0\'e6\'e4\'ee\'e3\'ee \'f2\'e5\'f1\'f2\'e0\par
\cf3\tab\cf4\b public static void\cf1\b0  initsomething()\{\par
\tab\tab ICalculator calc = \cf4\b new\cf1\b0  CalculatorImpl;\par
\cf3\tab @AfterClass\tab\tab\tab\tab\tab\tab\cf1\'ea\'e0\'ea \'e8\cf3\tab @BeforClass \cf1\'ee\'e1\'ff\'e7\'e0\'f2\'e5\'eb\'fc\'ed\'ee \cf4\b static\cf1\b0 , \'ec\'e5\'f2\'ee\'e4 \'e7\'e0\'ef\'f3\'f1\'f2\'e8\'f2\'f1\'ff \'ef\'ee\'f1\'eb\'e5 \'e2\'f1\'e5\'f5 \'f2\'e5\'f1\'f2\'ee\'e2\par
\cf3\tab\cf4\b public static void\cf1\b0  clearsomething()\{\par
\tab\tab calc = \cf4\b null\cf1\b0 ;\par
\tab\cf3 @Test\cf1\par
\cf3\tab\cf4\b public void\cf1\b0  Test1()\{\par
\tab\cf3 @Test\cf1\par
\cf3\tab\cf4\b public void\cf1\b0  Test2()\{\par
\tab\cf3 @Test\cf1\par
\cf3\tab\cf4\b public void\cf1\b0  Test3()\{\par
\tab\tab\par
\'c4\'e0\'eb\'e5\'e5 \'ee\'ef\'e8\'f1\'fb\'e2\'e0\'e5\'f2\'f1\'ff \'e8\'e3\'f0\'e0 \'f1 \'e8\'f1\'ea\'eb\'fe\'f7\'e5\'ed\'e8\'ff\'ec\'e8 \'ef\'f0\'e8 "\'e0\'eb\'fc\'f2\'e5\'f0\'ed\'e0\'f2\'e8\'e2\'ed\'fb\'f5" \'f1\'f6\'e5\'ed\'e0\'f0\'e8\'ff\'f5 (\'e2\'ec\'e5\'f1\'f2\'ee \'f7\'e8\'f1\'eb\'e0 \'e2\'e2\'ee\'e4\'e8\'ec \'e1\'f3\'ea\'e2\'f3).\par
\par
\'cc\'ee\'e6\'ed\'ee \'e4\'e5\'eb\'e0\'f2\'fc \'f2\'e0\'ea\'e8\'e5 \'e7\'e0\'e3\'eb\'f3\'f8\'ea\'e8\par
\cf3 @Ignore("\'dd\'f2\'ee\'f2 \'f2\'e5\'f1\'f2 \'ef\'ee\'ea\'e0 \'ed\'e5 \'e3\'ee\'f2\'ee\'e2")\cf1\par
\cf3 @Test\cf1\par
\cf4\b public void\cf1\b0  Test1()\{\par
\par
\'c0\'ed\'ed\'ee\'f2\'e0\'f6\'e8\'ff \cf3 @Rule\cf1  \'e8 \'e5\'b8 \'ea\'eb\'e0\'f1\'f1\'fb - \'e0\'ed\'e0\'eb\'ee\'e3\'e8 \cf3 @Test(expected\cf1  ... \'e8 \cf3 @Test(timeout\cf1  ... \par
\cf4\b import\cf1\b0  org.junit.rules.ExpectedException;\par
\cf4\b import\cf1\b0  org.junit.rules.Timeout;\par
\cf4\b import\cf1\b0  org.junit.rules.TemporaryFolder;\par
\cf3 @Rule\cf1\par
\cf4\b public final \cf1\b0 ExpectedException e = ExpectedException.none();\tab\'f3 \'ea\'eb\'e0\'f1\'f1\'e0 ExpectedException \'e5\'f1\'f2\'fc \'ec\'e5\'f2\'ee\'e4 \'e5.expect(NotSuchMarkException.class)\par
\cf3 @Rule\cf1\par
\cf4\b public final \cf1\b0 Timeout t = \cf4\b new\cf1\b0  Timeout(100);\par
\cf3 @Rule\cf1\par
\cf4\b public final \cf1\b0 TemporaryFolder f = \cf4\b new\cf1\b0  TemporaryFolder()\tab\tab\'f3 \'ea\'eb\'e0\'f1\'f1\'e0 TemporaryFolder \'e5\'f1\'f2\'fc, \'ea \'ef\'f0\'e8\'ec\'e5\'f0\'f3, \'ec\'e5\'f2\'ee\'e4 f.newFile("asd.txt"), \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'f1\'ee\'e7\'e4\'e0\'b8\'f2 \'e2\'f0\'e5\'ec\'e5\'ed\'ed\'fb\'e5 \'f4\'e0\'e9\'eb\'fb. \'cf\'ee\'f1\'eb\'e5 \'f2\'e5\'f1\'f2\'e0 \'fd\'f2\'e8 \'f4\'e0\'e9\'eb\'fb \'f3\'e4\'e0\'eb\'ff\'fe\'f2\'f1\'ff.\par
\par
\'c4\'e0\'eb\'e5\'e5 \'ee\'ef\'e8\'f1\'fb\'e2\'e0\'e5\'f2\'f1\'ff \'ef\'f0\'ee \'ef\'f0\'ee\'f1\'eb\'f3\'f8\'e8\'e2\'e0\'ed\'e8\'e5 \'f1\'ee\'e1\'fb\'f2\'e8\'e9 \'ef\'f0\'e8 \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'e8 \'f1\'eb\'ee\'e6\'ed\'fb\'f5 \'f2\'e5\'f1\'f2\'ee\'e2.\par
\par
\ul Mock\ulnone\par
\'c7\'e0\'e3\'eb\'f3\'f8\'ea\'e0 \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'e5\'f2 \'e2 \'f2\'e5\'f1\'f2\'e0\'f5 \'ed\'e5 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \'f0\'e5\'e0\'eb\'fc\'ed\'fb\'e5 \'ec\'ee\'e4\'f3\'eb\'e8, \'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'ec\'ee\'e3\'f3\'f2 \'e7\'e0\'e2\'e8\'f1\'e5\'f2\'fc \'ee\'f2 \'f1\'e5\'f2\'e8 \'e8\'eb\'e8 \'c1\'c4, \'e0 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \'e8\'f5 \'ea\'ee\'ef\'e8\'e8, \'e2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'fe\'f9\'e8\'e5 \'f3\'e6\'e5 \'e7\'e0\'f0\'e0\'ed\'e5\'e5 \'ef\'ee\'e4\'e3\'ee\'f2\'ee\'e2\'eb\'e5\'ed\'ed\'fb\'e9 \'f0\'e5\'e7\'f3\'eb\'fc\'f2\'e0\'f2.\par
\par
\cf4\b public class\cf1\b0  StringHelperMock \cf4\b extends\cf1\b0  StringHelper\par
\tab\cf3 @Override\cf1\par
\tab\cf4\b public\cf1\b0  String help()\par
\tab\tab\cf4\b return \cf1\b0 "Hello"\par
\'e8\'eb\'e8 \'eb\'f3\'f7\'f8\'e5 \'f2\'e0\'ea\par
\tab\cf4\b private \cf1\b0 String value\par
\tab\cf3 @Override\cf1\par
\tab\cf4\b public\cf1\b0  String help()\par
\tab\tab\cf4\b return \cf1\b0 value\tab\tab\tab\tab (\'f0\'e8\'f1.1)\par
\tab\cf4\b public void \cf1\b0 setValue(String value)\par
\tab\tab\cf4\b this\cf1\b0 .value = value\par
\'e2 \'ef\'ee\'f2\'ee\'ec\par
\cf4\b class\cf1\b0  ServiceTest\par
\tab\cf3 @Test\cf1\par
\tab\cf4\b void \cf1\b0 service()\par
\tab\tab StringHelper s = \cf4\b new \cf1\b0 StringHelperMock()\par
\tab\tab Integer expected = loadingList(s, ...)\tab\tab\'e4\'eb\'ff \'f0\'e0\'e1\'ee\'f2\'fb loadingList \'ed\'e5\'ee\'e1\'f5\'ee\'e4\'e8\'ec \'ea\'eb\'e0\'f1\'f1 StringHelper. \'c2\'ee\'f2 \'ec\'fb \'e5\'e3\'ee \'e8 \'e7\'e0-Mock-\'e0\'eb\'e8.\par
\par
\'c4\'eb\'ff \'f2\'ee\'e3\'ee \'f7\'f2\'ee\'e1\'fb \'ed\'e5 \'ef\'e8\'f1\'e0\'f2\'fc \'f0\'e8\'f1.1, \'e5\'f1\'f2\'fc \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea\'e0 Mockito:\par
\tab\tab StringHelper s = Mockito.\i mock\i0 (StringHelper.class)\par
\tab\tab Mockito.\i when\i0 (s.help()).thenReturn("Hello")\par
\pard\sa200\sl276\slmult1\cf0\lang9\kerning0\f1\par
\par
}
 